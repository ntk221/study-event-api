// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: event.sql

package db

import (
	"context"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  name, date
) VALUES (
  $1, $2
)
RETURNING id, name, date
`

type CreateEventParams struct {
	Name string    `json:"name"`
	Date time.Time `json:"date"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.Name, arg.Date)
	var i Event
	err := row.Scan(&i.ID, &i.Name, &i.Date)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, name, date FROM events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(&i.ID, &i.Name, &i.Date)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, name, date FROM events
ORDER BY date
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(&i.ID, &i.Name, &i.Date); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsByDateRange = `-- name: ListEventsByDateRange :many
SELECT id, name, date FROM events
WHERE date BETWEEN $1 AND $2
ORDER BY date
`

type ListEventsByDateRangeParams struct {
	Date   time.Time `json:"date"`
	Date_2 time.Time `json:"date_2"`
}

func (q *Queries) ListEventsByDateRange(ctx context.Context, arg ListEventsByDateRangeParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEventsByDateRange, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(&i.ID, &i.Name, &i.Date); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET name = $2, date = $3
WHERE id = $1
RETURNING id, name, date
`

type UpdateEventParams struct {
	ID   int32     `json:"id"`
	Name string    `json:"name"`
	Date time.Time `json:"date"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent, arg.ID, arg.Name, arg.Date)
	var i Event
	err := row.Scan(&i.ID, &i.Name, &i.Date)
	return i, err
}
